@page "/muscles"
@using WorkoutTracker.Web.Models
@using WorkoutTracker.Web.ViewModels.MuscleViewModel

<PageTitle>Muscles</PageTitle>

<MessageComponent Errors="MuscleViewModel.Errors" SuccessMessages="MuscleViewModel.SuccessMessages" IsBusy="MuscleViewModel.IsBusy" />

<h1>Muscles</h1>

<div class="card-grid">
    @foreach (var muscle in MuscleViewModel.Muscles ?? new List<MuscleDto>())
    {
        <div class="muscle-card">
            <AuthorizeView Roles="Admin">
                <Authorized>
                    <button @onclick="() => ShowEditMuscle(muscle)" class="icon-button button-top-right-corner"><i class="fa fa-pencil text-warning" /></button>
                </Authorized>
            </AuthorizeView>

            <a href="@($"exercises?muscle={muscle.Name}")">
                <img src="@muscle.ImageUrl" alt="@muscle.Name" />
                <div class="card-info">
                    <h5>@muscle.Name</h5>
                    <p>@muscle.Description</p>
                </div>
            </a>
        </div>
    }
</div>

<UpdateMuscleComponent ViewModel="MuscleViewModel" IsVisible="showEditMuscleComponent" UpdateMuscle="updateMuscle" Muscle="selectedMuscle" OnConfirm="OnEdit" />

@code {
    [Inject] 
    IMuscleViewModel MuscleViewModel { get; set; }

    [Inject]
    NavigationManager NavigationManager { get; set; }

    private bool showEditMuscleComponent = false;
    private UpdateMuscleClientDto updateMuscle;
    private MuscleDto selectedMuscle;

    protected override async Task OnInitializedAsync() 
    {
        MuscleViewModel.PropertyChanged += ViewModelPropertyChanged;

        await MuscleViewModel.GetMuscles();
    }

    public void Dispose() => MuscleViewModel.PropertyChanged -= ViewModelPropertyChanged;

    private async void ViewModelPropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e) => await InvokeAsync(() => { StateHasChanged(); });

    private void NavigateToExercises(string muscleName) 
    {
        NavigationManager.NavigateTo($"exercises?muscle={muscleName}");
    }

    private void ShowEditMuscle(MuscleDto muscle)
    {
        selectedMuscle = new MuscleDto(muscle); // Create a copy to avoid modifying the original muscle directly
        updateMuscle = new UpdateMuscleClientDto(muscle);
        showEditMuscleComponent = true;
    }

    private async Task OnEdit(bool confirmed) 
    {
        if(confirmed) 
        {
            var result = await MuscleViewModel.Update(selectedMuscle.Id, updateMuscle);

            //Replace the updated muscle in the list if the update was successful
            if(result != null) 
            {
                var currentMuscle = MuscleViewModel.Muscles.First(x => x.Id == selectedMuscle.Id);

                MuscleViewModel.Muscles[MuscleViewModel.Muscles.IndexOf(currentMuscle)] = result;

                showEditMuscleComponent = false;
            }
        }
        else 
        {
            showEditMuscleComponent = false;
        }
    }
}