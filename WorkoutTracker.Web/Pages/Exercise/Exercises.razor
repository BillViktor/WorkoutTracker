@page "/exercises"
@using WorkoutTracker.Shared.Dto.Result
@using WorkoutTracker.Web.ViewModels.ExerciseViewModel
@using WorkoutTracker.Web.ViewModels.MuscleViewModel

<PageTitle>Exercises</PageTitle>

<MessageComponent Errors="errors" SuccessMessages="successMessages" IsBusy="isBusy" />

<h1>Exercises</h1>

<div class="row gap-1">
    <input @bind="searchString" @bind:event="oninput" @bind:after="SearchChanged" id="searchInput" placeholder="Search by name..." type="text">

    <div>
        <button class="button-primary m-0"><i class="fa fa-filter" /> Filters</button>
    </div>
</div>


<div class="card-grid">
    @foreach (var exercise in ExerciseViewModel.Entities?.List ?? new List<ExerciseDto>())
    {
        <div class="exercise-card">
            <a href="@($"exercises/{exercise.Id}")">
                <img src="@exercise.ImageUrl" alt="@exercise.Name" />
                <div class="card-info">
                    <h5>@exercise.Name</h5>
                    <h4>@exercise.PrimaryMuscle.Name</h4>
                    <p>@exercise.Description</p>
                </div>
            </a>
        </div>
    }
</div>

@code {
    [Inject]
    IMuscleViewModel MuscleViewModel { get; set; }

    [Inject]
    IExerciseViewModel ExerciseViewModel { get; set; }

    [Inject]
    NavigationManager NavigationManager { get; set; }

    private bool isBusy {
        get => MuscleViewModel.IsBusy || ExerciseViewModel.IsBusy;
    }
    private List<ErrorModel> errors => MuscleViewModel.Errors.Concat(ExerciseViewModel.Errors).ToList();
    private List<string> successMessages => MuscleViewModel.SuccessMessages.Concat(ExerciseViewModel.SuccessMessages).ToList();

    private string searchString = "";
    private List<MuscleDto> selectedMuscles = new List<MuscleDto>();

    protected override async Task OnInitializedAsync()
    {
        MuscleViewModel.PropertyChanged += ViewModelPropertyChanged;
        ExerciseViewModel.PropertyChanged += ViewModelPropertyChanged;

        await MuscleViewModel.GetMuscles();
        await ExerciseViewModel.GetEntities();
    }

    public void Dispose() 
    {
        MuscleViewModel.PropertyChanged -= ViewModelPropertyChanged;
        ExerciseViewModel.PropertyChanged -= ViewModelPropertyChanged;
    }

    private async void ViewModelPropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e) => await InvokeAsync(() => { StateHasChanged(); });

    private async Task SearchChanged() 
    {
        ExerciseViewModel.EntityParameters.SearchString = searchString;
        await ExerciseViewModel.GetEntities();
    }
}