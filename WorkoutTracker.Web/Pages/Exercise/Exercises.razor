@page "/exercises"
@using Microsoft.AspNetCore.WebUtilities
@using WorkoutTracker.Shared.Dto.Exercise
@using WorkoutTracker.Shared.Dto.Pagination
@using WorkoutTracker.Shared.Dto.Result
@using WorkoutTracker.Web.Components.Exercise
@using WorkoutTracker.Web.Models
@using WorkoutTracker.Web.ViewModels.ExerciseViewModel
@using WorkoutTracker.Web.ViewModels.MuscleViewModel

<PageTitle>Exercises</PageTitle>

<MessageComponent Errors="MuscleViewModel.Errors" SuccessMessages="MuscleViewModel.SuccessMessages" IsBusy="MuscleViewModel.IsBusy" />
<MessageComponent Errors="ExerciseViewModel.Errors" SuccessMessages="ExerciseViewModel.SuccessMessages" IsBusy="ExerciseViewModel.IsBusy" />

<div class="row justify-content-between">
    <h1>Exercises</h1>

    <AuthorizeView Roles="Admin">
        <Authorized>
            <div>
                <button @onclick="ShowCreateExercise" class="button-success m-0"><i class="fa fa-plus" /> Add</button>
            </div>
        </Authorized>
    </AuthorizeView>
</div>


<ExerciseComponent @ref="exerciseComponent" MuscleName="@muscleName" ExerciseSelected="OnExerciseSelected" />

<AddExerciseComponent IsVisible="showCreateExerciseComponent" Exercise="newExercise" Muscles="MuscleViewModel.Muscles" OnConfirm="OnCreate" />

@code {
    [Inject]
    IMuscleViewModel MuscleViewModel { get; set; }

    [Inject]
    IExerciseViewModel ExerciseViewModel { get; set; }

    [Inject]
    IJSRuntime JS { get; set; }

    [Inject]
    NavigationManager NavigationManager { get; set; }

    private ExerciseComponent exerciseComponent;

    private string? muscleName = null;

    private bool showCreateExerciseComponent = false;
    private AddExerciseClientDto newExercise;

    protected override void OnInitialized() => GetQueryString();

    public void Dispose() 
    {
        MuscleViewModel.PropertyChanged -= ViewModelPropertyChanged;
        ExerciseViewModel.PropertyChanged -= ViewModelPropertyChanged;
    }

    private async void ViewModelPropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e) => await InvokeAsync(() => { StateHasChanged(); });

    private void GetQueryString()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        var queryDict = QueryHelpers.ParseQuery(uri.Query);

        if (queryDict.TryGetValue("muscle", out var value))
        {
            muscleName = value.ToString();
            Console.WriteLine($"Muscle Name from Query: {muscleName}");
        }
    }
    private void ShowCreateExercise() 
    {
        showCreateExerciseComponent = true;
        newExercise = new AddExerciseClientDto();
    }

    private async Task OnCreate(bool confirmed)
    {
        if (confirmed)
        {
            var result = await ExerciseViewModel.Add(newExercise);

            //Update the list if successfully added
            if (result != null)
            {
                await exerciseComponent.Refresh();
                showCreateExerciseComponent = false;
            }
        }
        else
        {
            showCreateExerciseComponent = false;
        }

        StateHasChanged();
    }

    private void OnExerciseSelected(ExerciseDto exercise) 
    {
        NavigationManager.NavigateTo($"exercises/{exercise.Id}");
    }
}