@page "/exercises"
@using Microsoft.AspNetCore.WebUtilities
@using WorkoutTracker.Shared.Dto.Pagination
@using WorkoutTracker.Shared.Dto.Result
@using WorkoutTracker.Web.ViewModels.ExerciseViewModel
@using WorkoutTracker.Web.ViewModels.MuscleViewModel

<PageTitle>Exercises</PageTitle>

<MessageComponent Errors="errors" SuccessMessages="successMessages" IsBusy="isBusy" />

<h1>Exercises</h1>

<div class="row gap-1">
    <input @bind="ExerciseViewModel.ExerciseParameters.ExerciseName" @bind:event="oninput" @bind:after="SearchChanged" id="searchInput" placeholder="Search by name..." type="text">

    <div>
        <select @bind="ExerciseViewModel.ExerciseParameters.PrimaryMuscle" @bind:after="SearchChanged">
            <option value="">All Muscles</option>
            @foreach (var muscle in MuscleViewModel.Muscles ?? new List<MuscleDto>())
            {
                <option value="@muscle.Name">@muscle.Name</option>
            }
        </select>
    </div>
</div>

<p class="m-0">
    @($"{ExerciseViewModel.Entities?.Count ?? 0} exercises found.")
</p>

<div class="card-grid">
    @foreach (var exercise in ExerciseViewModel.Entities?.List ?? new List<ExerciseDto>())
    {
        <div class="exercise-card">
            <a href="@($"exercises/{exercise.Id}")">
                <img src="@exercise.ImageUrl" alt="@exercise.Name" />
                <div class="card-info">
                    <h5>@exercise.Name</h5>
                    <h4>@exercise.PrimaryMuscle.Name</h4>
                    <p>@exercise.Description</p>
                </div>
            </a>
        </div>
    }
</div>

@if(ExerciseViewModel.Entities?.List != null) 
{
    <PaginationComponent Page="ExerciseViewModel.ExerciseParameters.Page" PageCount="ExerciseViewModel.ExerciseParameters.PageCount" TotalCount="ExerciseViewModel.Entities.Count" PageChanged="OnPageChanged" />
}

@code {
    [Inject]
    IMuscleViewModel MuscleViewModel { get; set; }

    [Inject]
    IExerciseViewModel ExerciseViewModel { get; set; }

    [Inject]
    IJSRuntime JS { get; set; }

    [Inject]
    NavigationManager NavigationManager { get; set; }

    private bool isBusy {
        get => MuscleViewModel.IsBusy || ExerciseViewModel.IsBusy;
    }
    private List<ErrorModel> errors => MuscleViewModel.Errors.Concat(ExerciseViewModel.Errors).ToList();
    private List<string> successMessages => MuscleViewModel.SuccessMessages.Concat(ExerciseViewModel.SuccessMessages).ToList();

    private string searchString = "";

    protected override async Task OnInitializedAsync()
    {
        ExerciseViewModel.ExerciseParameters = new ExerciseParameters();

        MuscleViewModel.PropertyChanged += ViewModelPropertyChanged;
        ExerciseViewModel.PropertyChanged += ViewModelPropertyChanged;

        await MuscleViewModel.GetMuscles();

        GetQueryString();

        await SearchChanged();
    }

    private void GetQueryString() 
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        var queryDict = QueryHelpers.ParseQuery(uri.Query);

        if (queryDict.TryGetValue("muscle", out var value))
        {
            if (MuscleViewModel.Muscles?.Any(x => string.Equals(x.Name, value.ToString(), StringComparison.OrdinalIgnoreCase)) == true)
            {
                ExerciseViewModel.ExerciseParameters.PrimaryMuscle = value.ToString();
            }
        }
    }

    public void Dispose() 
    {
        MuscleViewModel.PropertyChanged -= ViewModelPropertyChanged;
        ExerciseViewModel.PropertyChanged -= ViewModelPropertyChanged;
    }

    private async void ViewModelPropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e) => await InvokeAsync(() => { StateHasChanged(); });

    private async Task SearchChanged() 
    {
        //Reset the page
        ExerciseViewModel.ExerciseParameters.Page = 0;
        await ExerciseViewModel.GetEntities();
    }

    private async Task OnPageChanged(int page)
    {
        ExerciseViewModel.ExerciseParameters.Page = page;
        await ExerciseViewModel.GetEntities();
        await JS.InvokeVoidAsync("scrollTo", 0, 0);
    }
}