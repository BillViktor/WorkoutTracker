@page "/forgot-password"
@using WorkoutTracker.Shared.Dto.Auth.Password
@using WorkoutTracker.Web.Components
@using WorkoutTracker.Web.ViewModels.AuthViewModel

<PageTitle>WorkoutTracker - Forgot Password</PageTitle>

<MessageComponent IsBusy="AuthViewModel.IsBusy" Errors="AuthViewModel.Errors" SuccessMessages="AuthViewModel.SuccessMessages"/>

<div class="center box">
    <h2>Reset Password</h2>

    <EditForm Model="forgotPasswordRequestModel" OnValidSubmit="ForgotPasswordRequest">
        <DataAnnotationsValidator />

        <p>
            <ValidationSummary />
        </p>

        <p>
            <label for="email">Email</label>
            <input @bind="forgotPasswordRequestModel.Email" id="email" class="w-100" />
        </p>

        <button class="w-100 button-primary" type="submit">Reset Password</button>
    </EditForm>

    <p class="text-center">
        Remeber your password? <a href="login">Login!</a>
    </p>
</div>

@code {
    [Inject] IAuthViewModel AuthViewModel { get; set; }
    [Inject] NavigationManager NavigationManager { get; set; }

    private ForgotPasswordRequestDto forgotPasswordRequestModel = new ForgotPasswordRequestDto();

    protected override void OnInitialized()
    {
        AuthViewModel.PropertyChanged += ViewModelPropertyChanged;

        if (AuthViewModel.UserInfo != null)
        {
            NavigationManager.NavigateTo("");
        }

        base.OnInitialized();
    }

    public void Dispose() => AuthViewModel.PropertyChanged -= ViewModelPropertyChanged;

    private async void ViewModelPropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e) => await InvokeAsync(() => { StateHasChanged(); });

    private async Task ForgotPasswordRequest()
    {
        if (await AuthViewModel.ForgotPassword(forgotPasswordRequestModel))
        {
            forgotPasswordRequestModel.Email = "";
        }
    }
}