@using Microsoft.AspNetCore.Http
@using WorkoutTracker.Shared.Dto.Exercise
@using WorkoutTracker.Shared.Dto.Routine
@using WorkoutTracker.Shared.Dto.RoutineDay
@using WorkoutTracker.Shared.Dto.RoutineDayExercise
@using WorkoutTracker.Web.Models
@using WorkoutTracker.Web.ViewModels.Base
@using WorkoutTracker.Web.ViewModels.RoutineDayViewModel
@if (IsVisible)
{
    <div class="backdrop">
        <div class="dialog">
            <h3>Add Exercise</h3>

            <EditForm Model="RoutineDayExercise" OnValidSubmit="async () => await OnConfirm.InvokeAsync(true)">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <p>
                    <label for="exerciseSets">Sets</label>
                    <input class="w-100" id="exerciseSets" @bind="@RoutineDayExercise.Sets" placeholder="Sets" />
                </p>

                <p>
                    <label for="exerciseReps">Reps</label>
                    <input class="w-100" id="exerciseReps" @bind="@RoutineDayExercise.Reps" placeholder="Reps" />
                </p>

                <p>
                    <label for="exerciseRest">Rest Time (s)</label>
                    <input class="w-100" id="exerciseRest" @bind="@RoutineDayExercise.RestTimeSeconds" placeholder="Rest Time (s)" />
                </p>

                <div class="row justify-content-end gap-1">
                    <button type="submit" class="button-success">Add Exercise</button>
                    <button @onclick="async () => await OnConfirm.InvokeAsync(false)" class="button-warning">Cancel</button>
                </div>
            </EditForm>
        </div>
    </div>
}

@code {
    [Parameter]
    public AddRoutineDayExerciseDto RoutineDayExercise { get; set; }

    [Parameter]
    public bool IsVisible { get; set; } = false;

    [Parameter]
    public EventCallback<bool> OnConfirm { get; set; }
}