<div class="row justify-content-center">
    <button class="pagination-button" disabled="@(IsBusy || Page == 0)" @onclick="async () => await SetPage(0)">@("<<")</button>
    <button class="pagination-button" disabled="@(IsBusy || !HasPreviousPage)" @onclick="async () => await SetPage(Page-1)">@("<")</button>

    @for (int i = StartPage; i <= EndPage; i++)
    {
        int page = i;

        <button class="pagination-button @(i == Page ? "active" : "")"
                disabled="@(IsBusy)"
                @onclick="async () => await SetPage(page)">
            @($"{i + 1}")
        </button>
    }

    <button class="pagination-button" disabled="@(IsBusy || !HasNextPage)" @onclick="async () => await SetPage(Page+1)">@(">")</button>
    <button class="pagination-button" disabled="@(IsBusy || Page == LastPage)" @onclick="async () => await SetPage(LastPage)">@(">>")</button>
</div>

<div class="text-center">
    <span class="m-0">
        @if(TotalCount == 0) 
        {
            @("Results: 0 of 0")
        }
        else 
        {
            @($"Results: {FirstItem} - {EndItem} of {TotalCount}")
        }
    </span>
</div>

@code {
    [Parameter]
    public int Page { get; set; }

    [Parameter]
    public int PageCount { get; set; } 

    [Parameter]
    public int TotalCount { get; set; }

    [Parameter]
    public bool IsBusy { get; set; }

    [Parameter]
    public EventCallback<int> PageChanged { get; set; }

    private bool HasPreviousPage => Page > 0;
    private bool HasNextPage => Page < LastPage;
    private int LastPage => Math.Max((int)Math.Ceiling((double)TotalCount / PageCount) - 1, 0);
    private int FirstItem => (Page * PageCount) + 1;
    private int EndItem => Math.Min((Page + 1) * PageCount, TotalCount);
    private int LastItem => Math.Min((Page * PageCount) + PageCount, TotalCount);

    private const int maxButtons = 5;
    private int StartPage
    {
        get
        {
            if (LastPage+1 <= maxButtons)
                return 0;

            int start = Page - 2;

            if (start < 0)
                start = 0;

            if (start + maxButtons > LastPage + 1)
                start = LastPage + 1 - maxButtons;

            return start;
        }
    }
    private int EndPage => Math.Min(StartPage + maxButtons - 1, LastPage);

    private async Task SetPage(int page) 
    {
        await PageChanged.InvokeAsync(page);
    }
}