@using WorkoutTracker.Shared.Models
@using WorkoutTracker.Web.ViewModels.EntityViewModel

@typeparam T where T : BaseEntity

<MessageComponent IsBusy="EntityViewModel.IsBusy" Errors="EntityViewModel.Errors" SuccessMessages="EntityViewModel.SuccessMessages" />

<!-- Allow creation of new entities? -->
<div class="row align-content-center justify-content-between">
    @if (!string.IsNullOrWhiteSpace(Title))
    {
        <h1>@Title</h1>
    }
    @if (CanAdd)
    {
        <div>
            <button @onclick="Add" class="button-primary">
                Add Entity
                <i class="fa fa-plus"></i>
            </button>
        </div>
    }
</div>

<!-- The data -->
<table>
    <thead>
        <tr>
            @foreach (var property in typeof(T).GetProperties())
            {
                <th>@property.Name</th>
            }
            <th></th>
        </tr>
    </thead>
    <tbody>
        @if (EntityViewModel.Entities != null)
        {
            @foreach (var entity in EntityViewModel.Entities.List)
            {
                <tr>
                    @foreach (var property in typeof(T).GetProperties())
                    {
                        <td>@property.GetValue(entity)</td>
                    }
                    <td>
                        <div class="row align-items-center">
                            @if (CanEdit)
                            {
                                <button title="Edit entity" @onclick="() => Edit(entity)" class="icon-button text-warning"><i class="fa fa-pencil" /></button>
                            }
                            @if (CanDelete)
                            {
                                <button title="Delete entity" @onclick="() => Delete(entity)" class="icon-button text-danger"><i class="fa fa-trash" /></button>
                            }
                        </div>

                    </td>
                </tr>
            }
        }
    </tbody>
</table>

@if (EntityViewModel.Entities != null)
{
    <!-- Pagination Controls -->
    <div class="row align-content-center justify-content-between mt-1 pagination-controls">
        <div>
            <button class="pagination-button" disabled="@(Page == 0)" @onclick="async () => await SetPage(0)"><i class="fa fa-step-backward" /></button>
            <button class="pagination-button" disabled="@(!HasPrevious)" @onclick="async () => await SetPage(Page - 1)"><i class="fa fa-caret-left" /></button>

            @for (int i = start; i <= end; i++)
            {
                int page = i;
                <button class="pagination-button @(i == Page ? "active" : "")" @onclick="() => SetPage(page)">
                    @(page + 1)
                </button>
            }

            <button class="pagination-button" disabled="@(!HasNext)" @onclick="async () => await SetPage(Page + 1)"><i class="fa fa-caret-right" /></button>
            <button class="pagination-button" disabled="@(Page == LastPage)" @onclick="async () => await SetPage(LastPage)"><i class="fa fa-step-forward" /></button>
        </div>

        <div class="row align-content-center gap-1">
            <p class="m-0">
                @StartItemIndex–@EndItemIndex of @EntityViewModel.Entities.Count
            </p>

            <p class="m-0"> 
                <select class="pagination-select" @bind="EntityViewModel.EntityParameters.PageCount" @bind:after="PaginationPageCountChanged">
                    <option value="5">5</option>
                    <option value="20">20</option>
                    <option value="50">50</option>
                    <option value="100">100</option>
                </select>
            </p>
        </div>
    </div>
}

<!-- Actions -->
<ConfirmationComponent Title="Confirm" Message="Are you sure you want to permanently delete this entity?" IsVisible="DeleteEntity" OnConfirm="OnDelete" />
<EditEntityComponent IsVisible="EditEntity" OnConfirm="OnEdit" />
<AddEntityComponent IsVisible="AddEntity" Entity="NewEntity" Type="NewEntity.GetType()" OnConfirm="OnAdd" />

@code {
    [Parameter] 
    public bool CanAdd { get; set; } = true;

    [Parameter] 
    public bool CanEdit { get; set; } = true;

    [Parameter] 
    public bool CanDelete { get; set; } = true;

    [Parameter] 
    public IEntityViewModel<T> EntityViewModel { get; set; }

    [Parameter] 
    public string Title { get; set; }

    private int TotalCount => EntityViewModel.Entities?.Count ?? 0;
    private int Page => EntityViewModel.EntityParameters.Page;
    private int PageCount => EntityViewModel.EntityParameters.PageCount;

    private int LastPage => Math.Max(0, (int)Math.Ceiling((double)TotalCount / PageCount) - 1);
    private bool HasNext => Page < LastPage;
    private bool HasPrevious => Page > 0;

    private int StartItemIndex => TotalCount == 0 ? 0 : Page * PageCount + 1;
    private int EndItemIndex => Math.Min((Page + 1) * PageCount, TotalCount);

    private bool DeleteEntity = false;
    private bool EditEntity = false;
    private bool AddEntity = false;
    private object SelectedEntity = null;
    private object NewEntity = Activator.CreateInstance(typeof(T));

    //Pagination buttons
    private const int range = 2;
    private int start { get { return Math.Max(Page - range, 0); } }
    private int end { get { return Math.Min(Page + range, LastPage); } }

    protected override void OnInitialized()
    {
        EntityViewModel.PropertyChanged += ViewModelPropertyChanged;

        base.OnInitialized();
    }

    public void Dispose() => EntityViewModel.PropertyChanged -= ViewModelPropertyChanged;

    private async void ViewModelPropertyChanged(object sender, System.ComponentModel.PropertyChangedEventArgs e) => await InvokeAsync(() => { StateHasChanged(); });

    /// <summary>
    /// 
    /// </summary>
    private async Task PaginationPageCountChanged()
    {
        EntityViewModel.EntityParameters.Page = 0;
        await EntityViewModel.GetEntities();
    }

    /// <summary>
    /// Set the page for the pagination
    /// </summary>
    private async Task SetPage(int page)
    {
        EntityViewModel.EntityParameters.Page = page;
        await EntityViewModel.GetEntities();
    }

    //// <summary>
    /// Start the creation of a new entity
    /// </summary>
    private void Add()
    {
        AddEntity = true;
    }

    /// <summary>
    /// Add an entity
    /// </summary>
    private async Task OnAdd(bool add)
    {
        if (add)
        {
            var entity = await EntityViewModel.Add(NewEntity as T);

            if (entity != null)
            {
                //TODO...
            }
        }
        else
        {
            AddEntity = false;
        }
    }

    /// <summary>
    /// Start the deletion of an entity
    /// </summary>
    private void Delete(object entity) 
    {
        SelectedEntity = entity;
        DeleteEntity = true;
    }

    /// <summary>
    /// Delete an entity
    /// </summary>
    private async Task OnDelete(bool delete) 
    {
        if(delete) 
        {
            if(await EntityViewModel.Delete(SelectedEntity as T)) 
            {
                DeleteEntity = false;
                SelectedEntity = null;

                // If there is only one entity and we are on the first page, go back to the previous page (to avoid empty list))
                if(EntityViewModel.Entities.List.Count == 1 && HasPrevious) 
                {
                    await SetPage(EntityViewModel.EntityParameters.Page - 1);
                }
                else 
                {
                    // Otherwise, just refresh the current page
                    await EntityViewModel.GetEntities();
                }
            }
        }
        else 
        {
            DeleteEntity = false;
            SelectedEntity = null;
        }
    } 

    /// <summary>
    /// Start the editing of an entity
    /// </summary>
    private void Edit(object entity)
    {
        SelectedEntity = entity;
        EditEntity = true;
    }


    /// <summary>
    /// Update an entity
    /// </summary>
    private async Task OnEdit(bool edit)
    {
        if (edit)
        {
            var entity = await EntityViewModel.Update(SelectedEntity as T);

            if(entity != null ) 
            {
                //TODO...
            }
        }
        else
        {
            EditEntity = false;
            SelectedEntity = null;
        }
    }
}
