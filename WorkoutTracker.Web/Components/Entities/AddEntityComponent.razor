@using System.Reflection
@using WorkoutTracker.Shared.Models

@if (IsVisible)
{
    <div class="backdrop">
        <div class="dialog">
            <p class="font-bold">
                Add Entity
            </p>

            <EditForm Model="Entity" OnValidSubmit="HandleValidSubmit">
                <DataAnnotationsValidator />

                <p>
                    <ValidationSummary />
                </p>

                <!-- Use reflection to get all properties -->
                @foreach (var property in Entity.GetType().GetProperties())
                {
                    <p>
                        <label for="@($"{property.Name}Input")">@property.Name</label>
                        @switch (property.PropertyType)
                        {
                            case Type t when t == typeof(string) || t == typeof(int) || t == typeof(long) || t == typeof(double) || t == typeof(decimal):
                                <input disabled="@(!IsEditableProperty(property))" id="@($"{property.Name}Input")" placeholder="@property.Name" />
                                break;

                            case Type t when t == typeof(bool):
                                <input disabled="@(!IsEditableProperty(property))" id="@($"{property.Name}Input")" type="checkbox" />
                                break;

                            case Type t when t == typeof(DateTime) || t == typeof(Nullable<DateTime>):
                                <input disabled="@(!IsEditableProperty(property))" id="@($"{property.Name}Input")" type="datetime-local" />
                                break;

                            default:
                                @("Not assignable.")
                                break;
                        }
                    </p>

                }

                <hr />

                <div class="row justify-content-end">
                    <button type="submit" class="button-success"><i class="fa fa-plus" /> Add Entity</button>
                    <button @onclick="async () => await OnConfirm.InvokeAsync(false)" class="button-warning"><i class="fa fa-ban" />Cancel</button>
                </div>
            </EditForm>
        </div>
    </div>
}

@code {
    [Parameter] 
    public bool IsVisible { get; set; } = false;

    [Parameter] 
    public EventCallback<bool> OnConfirm { get; set; }

    [Parameter]
    public object Entity { get; set; }

    [Parameter]
    public Type Type { get; set; }

    /// <summary>
    /// Handles the form submition.
    /// </summary>
    private void HandleValidSubmit()
    {
        OnConfirm.InvokeAsync(true);
    }

    /// <summary>
    /// Check if a property is editable or not.
    /// </summary>
    /// <param name="t"></param>
    /// <returns></returns>
    private bool IsEditableProperty(PropertyInfo propertyInfo)
    {
        if (propertyInfo.Name == "CreateDate" || propertyInfo.Name == "UpdateDate" || propertyInfo.Name == "Id")
            return false;

        return true;
    }
}